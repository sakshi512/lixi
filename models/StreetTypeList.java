package io.model;

import java.io.IOException;
import com.fasterxml.jackson.annotation.*;

public enum StreetTypeList {
    ACCESS, ALLEY, ALLEYWAY, AMBLE, ANCHORAGE, APPROACH, ARCADE, ARTERIAL, ARTERY, AVENUE, BANAN, BANK, BASIN, BAY, BEACH, BEND, BLOCK, BOARDWALK, BOULEVARD, BOULEVARDE, BOWL, BRACE, BRAE, BREAK, BRIDGE, BROADWAY, BROW, BYPASS, BYWAY, CANAL, CAUSEWAY, CENTRE, CENTREWAY, CHASE, CIRCLE, CIRCLET, CIRCUIT, CIRCUS, CLOSE, CLUSTER, COLONNADE, COMMON, CONCOURSE, CONNECTION, COPSE, CORNER, CORSO, COURSE, COURT, COURTYARD, COVE, CRESCENT, CREST, CROSS, CROSSING, CROSSROAD, CROSSWAY, CRUISEWAY, CUL_DE_SAC, CUTTING, DALE, DELL, DENE, DEVIATION, DIP, DISTRIBUTOR, DIVIDE, DOCK, DOMAIN, DRIVE, DRIVEWAY, EDGE, ELBOW, END, ENTRANCE, ESPLANADE, ESTATE, ESTUARY, EXPRESSWAY, EXTENSION, FAIRWAY, FIREBREAK, FIRELINE, FIRETRACK, FIRETRAIL, FIRE_TRACK, FLAT, FOLLOW, FOOTWAY, FORD, FORESHORE, FORMATION, FREEWAY, FRONT, FRONTAGE, GAP, GARDEN, GARDENS, GATE, GATES, GATEWAY, GLADE, GLEN, GRANGE, GREEN, GROUND, GROVE, GULLY, HARBOUR, HEATH, HEIGHTS, HIGHROAD, HIGHWAY, HILL, HOLLOW, HUB, INTERCHANGE, INTERSECTION, JUNCTION, KEY, KEYS, LANDING, LANE, LANEWAY, LEES, LINE, LINK, LITTLE, LOOKOUT, LOOP, LOWER, MALL, MANOR, MEANDER, MEARS, MEW, MEWS, MILE, MOTORWAY, MOUNT, NOOK, OUTLET, OUTLOOK, PARADE, PARK, PARKLANDS, PARKWAY, PART, PASS, PATH, PATHWAY, PIAZZA, PIER, PLACE, PLATEAU, PLAZA, POCKET, POINT, PORT, PORTAL, PROMENADE, PURSUIT, QUAD, QUADRANGLE, QUADRANT, QUAY, QUAYS, RAMBLE, RAMP, RANGE, REACH, RESERVE, REST, RETREAT, RETURN, RIDE, RIDGE, RIDGEWAY, RIGHT_OF_WAY, RING, RISE, RISING, RIVER, RIVERWAY, RIVIERA, ROAD, ROADS, ROADSIDE, ROADWAY, RONDE, ROSEBOWL, ROTARY, ROUND, ROUTE, ROW, RUE, RUN, SERVICE_WAY, SHUNT, SIDING, SLOPE, SOUND, SPUR, SQUARE, STAIRS, STATE_HIGHWAY, STEPS, STRAND, STREET, STREETS, STRIP, SUBWAY, TARN, TARNICE_WAY, TERRACE, THOROUGHFARE, THROUGHWAY, TOLLWAY, TOP, TOR, TOWERS, TRACK, TRAIL, TRAILER, TRIANGLE, TRUNKWAY, TURN, TWIST, UNDERPASS, UPPER, VALE, VIADUCT, VIEW, VILLAS, VISTA, WADE, WALK, WALKWAY, WATERWAY, WAY, WHARF, WOODS, WYND, YARD;

    @JsonValue
    public String toValue() {
        switch (this) {
            case ACCESS: return "Access";
            case ALLEY: return "Alley";
            case ALLEYWAY: return "Alleyway";
            case AMBLE: return "Amble";
            case ANCHORAGE: return "Anchorage";
            case APPROACH: return "Approach";
            case ARCADE: return "Arcade";
            case ARTERIAL: return "Arterial";
            case ARTERY: return "Artery";
            case AVENUE: return "Avenue";
            case BANAN: return "Banan";
            case BANK: return "Bank";
            case BASIN: return "Basin";
            case BAY: return "Bay";
            case BEACH: return "Beach";
            case BEND: return "Bend";
            case BLOCK: return "Block";
            case BOARDWALK: return "Boardwalk";
            case BOULEVARD: return "Boulevard";
            case BOULEVARDE: return "Boulevarde";
            case BOWL: return "Bowl";
            case BRACE: return "Brace";
            case BRAE: return "Brae";
            case BREAK: return "Break";
            case BRIDGE: return "Bridge";
            case BROADWAY: return "Broadway";
            case BROW: return "Brow";
            case BYPASS: return "Bypass";
            case BYWAY: return "Byway";
            case CANAL: return "Canal";
            case CAUSEWAY: return "Causeway";
            case CENTRE: return "Centre";
            case CENTREWAY: return "Centreway";
            case CHASE: return "Chase";
            case CIRCLE: return "Circle";
            case CIRCLET: return "Circlet";
            case CIRCUIT: return "Circuit";
            case CIRCUS: return "Circus";
            case CLOSE: return "Close";
            case CLUSTER: return "Cluster";
            case COLONNADE: return "Colonnade";
            case COMMON: return "Common";
            case CONCOURSE: return "Concourse";
            case CONNECTION: return "Connection";
            case COPSE: return "Copse";
            case CORNER: return "Corner";
            case CORSO: return "Corso";
            case COURSE: return "Course";
            case COURT: return "Court";
            case COURTYARD: return "Courtyard";
            case COVE: return "Cove";
            case CRESCENT: return "Crescent";
            case CREST: return "Crest";
            case CROSS: return "Cross";
            case CROSSING: return "Crossing";
            case CROSSROAD: return "Crossroad";
            case CROSSWAY: return "Crossway";
            case CRUISEWAY: return "Cruiseway";
            case CUL_DE_SAC: return "Cul-De-Sac";
            case CUTTING: return "Cutting";
            case DALE: return "Dale";
            case DELL: return "Dell";
            case DENE: return "Dene";
            case DEVIATION: return "Deviation";
            case DIP: return "Dip";
            case DISTRIBUTOR: return "Distributor";
            case DIVIDE: return "Divide";
            case DOCK: return "Dock";
            case DOMAIN: return "Domain";
            case DRIVE: return "Drive";
            case DRIVEWAY: return "Driveway";
            case EDGE: return "Edge";
            case ELBOW: return "Elbow";
            case END: return "End";
            case ENTRANCE: return "Entrance";
            case ESPLANADE: return "Esplanade";
            case ESTATE: return "Estate";
            case ESTUARY: return "Estuary";
            case EXPRESSWAY: return "Expressway";
            case EXTENSION: return "Extension";
            case FAIRWAY: return "Fairway";
            case FIREBREAK: return "Firebreak";
            case FIRELINE: return "Fireline";
            case FIRETRACK: return "Firetrack";
            case FIRETRAIL: return "Firetrail";
            case FIRE_TRACK: return "Fire Track";
            case FLAT: return "Flat";
            case FOLLOW: return "Follow";
            case FOOTWAY: return "Footway";
            case FORD: return "Ford";
            case FORESHORE: return "Foreshore";
            case FORMATION: return "Formation";
            case FREEWAY: return "Freeway";
            case FRONT: return "Front";
            case FRONTAGE: return "Frontage";
            case GAP: return "Gap";
            case GARDEN: return "Garden";
            case GARDENS: return "Gardens";
            case GATE: return "Gate";
            case GATES: return "Gates";
            case GATEWAY: return "Gateway";
            case GLADE: return "Glade";
            case GLEN: return "Glen";
            case GRANGE: return "Grange";
            case GREEN: return "Green";
            case GROUND: return "Ground";
            case GROVE: return "Grove";
            case GULLY: return "Gully";
            case HARBOUR: return "Harbour";
            case HEATH: return "Heath";
            case HEIGHTS: return "Heights";
            case HIGHROAD: return "Highroad";
            case HIGHWAY: return "Highway";
            case HILL: return "Hill";
            case HOLLOW: return "Hollow";
            case HUB: return "Hub";
            case INTERCHANGE: return "Interchange";
            case INTERSECTION: return "Intersection";
            case JUNCTION: return "Junction";
            case KEY: return "Key";
            case KEYS: return "Keys";
            case LANDING: return "Landing";
            case LANE: return "Lane";
            case LANEWAY: return "Laneway";
            case LEES: return "Lees";
            case LINE: return "Line";
            case LINK: return "Link";
            case LITTLE: return "Little";
            case LOOKOUT: return "Lookout";
            case LOOP: return "Loop";
            case LOWER: return "Lower";
            case MALL: return "Mall";
            case MANOR: return "Manor";
            case MEANDER: return "Meander";
            case MEARS: return "Mears";
            case MEW: return "Mew";
            case MEWS: return "Mews";
            case MILE: return "Mile";
            case MOTORWAY: return "Motorway";
            case MOUNT: return "Mount";
            case NOOK: return "Nook";
            case OUTLET: return "Outlet";
            case OUTLOOK: return "Outlook";
            case PARADE: return "Parade";
            case PARK: return "Park";
            case PARKLANDS: return "Parklands";
            case PARKWAY: return "Parkway";
            case PART: return "Part";
            case PASS: return "Pass";
            case PATH: return "Path";
            case PATHWAY: return "Pathway";
            case PIAZZA: return "Piazza";
            case PIER: return "Pier";
            case PLACE: return "Place";
            case PLATEAU: return "Plateau";
            case PLAZA: return "Plaza";
            case POCKET: return "Pocket";
            case POINT: return "Point";
            case PORT: return "Port";
            case PORTAL: return "Portal";
            case PROMENADE: return "Promenade";
            case PURSUIT: return "Pursuit";
            case QUAD: return "Quad";
            case QUADRANGLE: return "Quadrangle";
            case QUADRANT: return "Quadrant";
            case QUAY: return "Quay";
            case QUAYS: return "Quays";
            case RAMBLE: return "Ramble";
            case RAMP: return "Ramp";
            case RANGE: return "Range";
            case REACH: return "Reach";
            case RESERVE: return "Reserve";
            case REST: return "Rest";
            case RETREAT: return "Retreat";
            case RETURN: return "Return";
            case RIDE: return "Ride";
            case RIDGE: return "Ridge";
            case RIDGEWAY: return "Ridgeway";
            case RIGHT_OF_WAY: return "Right Of Way";
            case RING: return "Ring";
            case RISE: return "Rise";
            case RISING: return "Rising";
            case RIVER: return "River";
            case RIVERWAY: return "Riverway";
            case RIVIERA: return "Riviera";
            case ROAD: return "Road";
            case ROADS: return "Roads";
            case ROADSIDE: return "Roadside";
            case ROADWAY: return "Roadway";
            case RONDE: return "Ronde";
            case ROSEBOWL: return "Rosebowl";
            case ROTARY: return "Rotary";
            case ROUND: return "Round";
            case ROUTE: return "Route";
            case ROW: return "Row";
            case RUE: return "Rue";
            case RUN: return "Run";
            case SERVICE_WAY: return "Service Way";
            case SHUNT: return "Shunt";
            case SIDING: return "Siding";
            case SLOPE: return "Slope";
            case SOUND: return "Sound";
            case SPUR: return "Spur";
            case SQUARE: return "Square";
            case STAIRS: return "Stairs";
            case STATE_HIGHWAY: return "State Highway";
            case STEPS: return "Steps";
            case STRAND: return "Strand";
            case STREET: return "Street";
            case STREETS: return "Streets";
            case STRIP: return "Strip";
            case SUBWAY: return "Subway";
            case TARN: return "Tarn";
            case TARNICE_WAY: return "Tarnice Way";
            case TERRACE: return "Terrace";
            case THOROUGHFARE: return "Thoroughfare";
            case THROUGHWAY: return "Throughway";
            case TOLLWAY: return "Tollway";
            case TOP: return "Top";
            case TOR: return "Tor";
            case TOWERS: return "Towers";
            case TRACK: return "Track";
            case TRAIL: return "Trail";
            case TRAILER: return "Trailer";
            case TRIANGLE: return "Triangle";
            case TRUNKWAY: return "Trunkway";
            case TURN: return "Turn";
            case TWIST: return "Twist";
            case UNDERPASS: return "Underpass";
            case UPPER: return "Upper";
            case VALE: return "Vale";
            case VIADUCT: return "Viaduct";
            case VIEW: return "View";
            case VILLAS: return "Villas";
            case VISTA: return "Vista";
            case WADE: return "Wade";
            case WALK: return "Walk";
            case WALKWAY: return "Walkway";
            case WATERWAY: return "Waterway";
            case WAY: return "Way";
            case WHARF: return "Wharf";
            case WOODS: return "Woods";
            case WYND: return "Wynd";
            case YARD: return "Yard";
        }
        return null;
    }

    @JsonCreator
    public static StreetTypeList forValue(String value) throws IOException {
        if (value.equals("Access")) return ACCESS;
        if (value.equals("Alley")) return ALLEY;
        if (value.equals("Alleyway")) return ALLEYWAY;
        if (value.equals("Amble")) return AMBLE;
        if (value.equals("Anchorage")) return ANCHORAGE;
        if (value.equals("Approach")) return APPROACH;
        if (value.equals("Arcade")) return ARCADE;
        if (value.equals("Arterial")) return ARTERIAL;
        if (value.equals("Artery")) return ARTERY;
        if (value.equals("Avenue")) return AVENUE;
        if (value.equals("Banan")) return BANAN;
        if (value.equals("Bank")) return BANK;
        if (value.equals("Basin")) return BASIN;
        if (value.equals("Bay")) return BAY;
        if (value.equals("Beach")) return BEACH;
        if (value.equals("Bend")) return BEND;
        if (value.equals("Block")) return BLOCK;
        if (value.equals("Boardwalk")) return BOARDWALK;
        if (value.equals("Boulevard")) return BOULEVARD;
        if (value.equals("Boulevarde")) return BOULEVARDE;
        if (value.equals("Bowl")) return BOWL;
        if (value.equals("Brace")) return BRACE;
        if (value.equals("Brae")) return BRAE;
        if (value.equals("Break")) return BREAK;
        if (value.equals("Bridge")) return BRIDGE;
        if (value.equals("Broadway")) return BROADWAY;
        if (value.equals("Brow")) return BROW;
        if (value.equals("Bypass")) return BYPASS;
        if (value.equals("Byway")) return BYWAY;
        if (value.equals("Canal")) return CANAL;
        if (value.equals("Causeway")) return CAUSEWAY;
        if (value.equals("Centre")) return CENTRE;
        if (value.equals("Centreway")) return CENTREWAY;
        if (value.equals("Chase")) return CHASE;
        if (value.equals("Circle")) return CIRCLE;
        if (value.equals("Circlet")) return CIRCLET;
        if (value.equals("Circuit")) return CIRCUIT;
        if (value.equals("Circus")) return CIRCUS;
        if (value.equals("Close")) return CLOSE;
        if (value.equals("Cluster")) return CLUSTER;
        if (value.equals("Colonnade")) return COLONNADE;
        if (value.equals("Common")) return COMMON;
        if (value.equals("Concourse")) return CONCOURSE;
        if (value.equals("Connection")) return CONNECTION;
        if (value.equals("Copse")) return COPSE;
        if (value.equals("Corner")) return CORNER;
        if (value.equals("Corso")) return CORSO;
        if (value.equals("Course")) return COURSE;
        if (value.equals("Court")) return COURT;
        if (value.equals("Courtyard")) return COURTYARD;
        if (value.equals("Cove")) return COVE;
        if (value.equals("Crescent")) return CRESCENT;
        if (value.equals("Crest")) return CREST;
        if (value.equals("Cross")) return CROSS;
        if (value.equals("Crossing")) return CROSSING;
        if (value.equals("Crossroad")) return CROSSROAD;
        if (value.equals("Crossway")) return CROSSWAY;
        if (value.equals("Cruiseway")) return CRUISEWAY;
        if (value.equals("Cul-De-Sac")) return CUL_DE_SAC;
        if (value.equals("Cutting")) return CUTTING;
        if (value.equals("Dale")) return DALE;
        if (value.equals("Dell")) return DELL;
        if (value.equals("Dene")) return DENE;
        if (value.equals("Deviation")) return DEVIATION;
        if (value.equals("Dip")) return DIP;
        if (value.equals("Distributor")) return DISTRIBUTOR;
        if (value.equals("Divide")) return DIVIDE;
        if (value.equals("Dock")) return DOCK;
        if (value.equals("Domain")) return DOMAIN;
        if (value.equals("Drive")) return DRIVE;
        if (value.equals("Driveway")) return DRIVEWAY;
        if (value.equals("Edge")) return EDGE;
        if (value.equals("Elbow")) return ELBOW;
        if (value.equals("End")) return END;
        if (value.equals("Entrance")) return ENTRANCE;
        if (value.equals("Esplanade")) return ESPLANADE;
        if (value.equals("Estate")) return ESTATE;
        if (value.equals("Estuary")) return ESTUARY;
        if (value.equals("Expressway")) return EXPRESSWAY;
        if (value.equals("Extension")) return EXTENSION;
        if (value.equals("Fairway")) return FAIRWAY;
        if (value.equals("Firebreak")) return FIREBREAK;
        if (value.equals("Fireline")) return FIRELINE;
        if (value.equals("Firetrack")) return FIRETRACK;
        if (value.equals("Firetrail")) return FIRETRAIL;
        if (value.equals("Fire Track")) return FIRE_TRACK;
        if (value.equals("Flat")) return FLAT;
        if (value.equals("Follow")) return FOLLOW;
        if (value.equals("Footway")) return FOOTWAY;
        if (value.equals("Ford")) return FORD;
        if (value.equals("Foreshore")) return FORESHORE;
        if (value.equals("Formation")) return FORMATION;
        if (value.equals("Freeway")) return FREEWAY;
        if (value.equals("Front")) return FRONT;
        if (value.equals("Frontage")) return FRONTAGE;
        if (value.equals("Gap")) return GAP;
        if (value.equals("Garden")) return GARDEN;
        if (value.equals("Gardens")) return GARDENS;
        if (value.equals("Gate")) return GATE;
        if (value.equals("Gates")) return GATES;
        if (value.equals("Gateway")) return GATEWAY;
        if (value.equals("Glade")) return GLADE;
        if (value.equals("Glen")) return GLEN;
        if (value.equals("Grange")) return GRANGE;
        if (value.equals("Green")) return GREEN;
        if (value.equals("Ground")) return GROUND;
        if (value.equals("Grove")) return GROVE;
        if (value.equals("Gully")) return GULLY;
        if (value.equals("Harbour")) return HARBOUR;
        if (value.equals("Heath")) return HEATH;
        if (value.equals("Heights")) return HEIGHTS;
        if (value.equals("Highroad")) return HIGHROAD;
        if (value.equals("Highway")) return HIGHWAY;
        if (value.equals("Hill")) return HILL;
        if (value.equals("Hollow")) return HOLLOW;
        if (value.equals("Hub")) return HUB;
        if (value.equals("Interchange")) return INTERCHANGE;
        if (value.equals("Intersection")) return INTERSECTION;
        if (value.equals("Junction")) return JUNCTION;
        if (value.equals("Key")) return KEY;
        if (value.equals("Keys")) return KEYS;
        if (value.equals("Landing")) return LANDING;
        if (value.equals("Lane")) return LANE;
        if (value.equals("Laneway")) return LANEWAY;
        if (value.equals("Lees")) return LEES;
        if (value.equals("Line")) return LINE;
        if (value.equals("Link")) return LINK;
        if (value.equals("Little")) return LITTLE;
        if (value.equals("Lookout")) return LOOKOUT;
        if (value.equals("Loop")) return LOOP;
        if (value.equals("Lower")) return LOWER;
        if (value.equals("Mall")) return MALL;
        if (value.equals("Manor")) return MANOR;
        if (value.equals("Meander")) return MEANDER;
        if (value.equals("Mears")) return MEARS;
        if (value.equals("Mew")) return MEW;
        if (value.equals("Mews")) return MEWS;
        if (value.equals("Mile")) return MILE;
        if (value.equals("Motorway")) return MOTORWAY;
        if (value.equals("Mount")) return MOUNT;
        if (value.equals("Nook")) return NOOK;
        if (value.equals("Outlet")) return OUTLET;
        if (value.equals("Outlook")) return OUTLOOK;
        if (value.equals("Parade")) return PARADE;
        if (value.equals("Park")) return PARK;
        if (value.equals("Parklands")) return PARKLANDS;
        if (value.equals("Parkway")) return PARKWAY;
        if (value.equals("Part")) return PART;
        if (value.equals("Pass")) return PASS;
        if (value.equals("Path")) return PATH;
        if (value.equals("Pathway")) return PATHWAY;
        if (value.equals("Piazza")) return PIAZZA;
        if (value.equals("Pier")) return PIER;
        if (value.equals("Place")) return PLACE;
        if (value.equals("Plateau")) return PLATEAU;
        if (value.equals("Plaza")) return PLAZA;
        if (value.equals("Pocket")) return POCKET;
        if (value.equals("Point")) return POINT;
        if (value.equals("Port")) return PORT;
        if (value.equals("Portal")) return PORTAL;
        if (value.equals("Promenade")) return PROMENADE;
        if (value.equals("Pursuit")) return PURSUIT;
        if (value.equals("Quad")) return QUAD;
        if (value.equals("Quadrangle")) return QUADRANGLE;
        if (value.equals("Quadrant")) return QUADRANT;
        if (value.equals("Quay")) return QUAY;
        if (value.equals("Quays")) return QUAYS;
        if (value.equals("Ramble")) return RAMBLE;
        if (value.equals("Ramp")) return RAMP;
        if (value.equals("Range")) return RANGE;
        if (value.equals("Reach")) return REACH;
        if (value.equals("Reserve")) return RESERVE;
        if (value.equals("Rest")) return REST;
        if (value.equals("Retreat")) return RETREAT;
        if (value.equals("Return")) return RETURN;
        if (value.equals("Ride")) return RIDE;
        if (value.equals("Ridge")) return RIDGE;
        if (value.equals("Ridgeway")) return RIDGEWAY;
        if (value.equals("Right Of Way")) return RIGHT_OF_WAY;
        if (value.equals("Ring")) return RING;
        if (value.equals("Rise")) return RISE;
        if (value.equals("Rising")) return RISING;
        if (value.equals("River")) return RIVER;
        if (value.equals("Riverway")) return RIVERWAY;
        if (value.equals("Riviera")) return RIVIERA;
        if (value.equals("Road")) return ROAD;
        if (value.equals("Roads")) return ROADS;
        if (value.equals("Roadside")) return ROADSIDE;
        if (value.equals("Roadway")) return ROADWAY;
        if (value.equals("Ronde")) return RONDE;
        if (value.equals("Rosebowl")) return ROSEBOWL;
        if (value.equals("Rotary")) return ROTARY;
        if (value.equals("Round")) return ROUND;
        if (value.equals("Route")) return ROUTE;
        if (value.equals("Row")) return ROW;
        if (value.equals("Rue")) return RUE;
        if (value.equals("Run")) return RUN;
        if (value.equals("Service Way")) return SERVICE_WAY;
        if (value.equals("Shunt")) return SHUNT;
        if (value.equals("Siding")) return SIDING;
        if (value.equals("Slope")) return SLOPE;
        if (value.equals("Sound")) return SOUND;
        if (value.equals("Spur")) return SPUR;
        if (value.equals("Square")) return SQUARE;
        if (value.equals("Stairs")) return STAIRS;
        if (value.equals("State Highway")) return STATE_HIGHWAY;
        if (value.equals("Steps")) return STEPS;
        if (value.equals("Strand")) return STRAND;
        if (value.equals("Street")) return STREET;
        if (value.equals("Streets")) return STREETS;
        if (value.equals("Strip")) return STRIP;
        if (value.equals("Subway")) return SUBWAY;
        if (value.equals("Tarn")) return TARN;
        if (value.equals("Tarnice Way")) return TARNICE_WAY;
        if (value.equals("Terrace")) return TERRACE;
        if (value.equals("Thoroughfare")) return THOROUGHFARE;
        if (value.equals("Throughway")) return THROUGHWAY;
        if (value.equals("Tollway")) return TOLLWAY;
        if (value.equals("Top")) return TOP;
        if (value.equals("Tor")) return TOR;
        if (value.equals("Towers")) return TOWERS;
        if (value.equals("Track")) return TRACK;
        if (value.equals("Trail")) return TRAIL;
        if (value.equals("Trailer")) return TRAILER;
        if (value.equals("Triangle")) return TRIANGLE;
        if (value.equals("Trunkway")) return TRUNKWAY;
        if (value.equals("Turn")) return TURN;
        if (value.equals("Twist")) return TWIST;
        if (value.equals("Underpass")) return UNDERPASS;
        if (value.equals("Upper")) return UPPER;
        if (value.equals("Vale")) return VALE;
        if (value.equals("Viaduct")) return VIADUCT;
        if (value.equals("View")) return VIEW;
        if (value.equals("Villas")) return VILLAS;
        if (value.equals("Vista")) return VISTA;
        if (value.equals("Wade")) return WADE;
        if (value.equals("Walk")) return WALK;
        if (value.equals("Walkway")) return WALKWAY;
        if (value.equals("Waterway")) return WATERWAY;
        if (value.equals("Way")) return WAY;
        if (value.equals("Wharf")) return WHARF;
        if (value.equals("Woods")) return WOODS;
        if (value.equals("Wynd")) return WYND;
        if (value.equals("Yard")) return YARD;
        throw new IOException("Cannot deserialize StreetTypeList");
    }
}
