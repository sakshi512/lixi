package io.model;

import java.io.IOException;
import com.fasterxml.jackson.annotation.*;

public enum EventNameApplicationInstructionsList {
    ADDITIONAL_INFORMATION_HAS_BEEN_REQUESTED, APPLICATION_RECEIVED, APPLICATION_REGISTERED, APPLICATION_SENT, AWAITING_SUPPORTING_DOCUMENTS, CANCELLED, COMMENT, COMMISSION_PAID, CONDITIONALLY_APPROVED, CREDIT_CHECK_ORDERED, CREDIT_CHECK_RECEIVED, DECLINED, DISCHARGED, DUPLICATE_SUBMISSION, EMPLOYMENT_CHECK_COMMENCED, EMPLOYMENT_CHECK_COMPLETED, EMPLOYMENT_CHECK_DELAYED, ERROR_ON_SUBMISSION, LMI_ORDERED, LMI_RESPONSE_RECEIVED, LOAN_DOCUMENTS_AND_REQUIREMENTS_COMPLETE, LOAN_DOCUMENTS_AND_REQUIREMENTS_INCOMPLETE, LOAN_DOCUMENTS_CERTIFIED_FOR_SETTLEMENT, LOAN_DOCUMENTS_ERROR_MESSAGE_RETURNED, LOAN_DOCUMENTS_FOLLOW_UP, LOAN_DOCUMENTS_ISSUED, LOAN_DOCUMENTS_PREPARATION_COMMENCED, LOAN_DOCUMENTS_PRODUCED, LOAN_DOCUMENTS_PRODUCED_AND_RETURNED_TO_LENDER, LOAN_DOCUMENTS_RECEIVED, LOAN_DOCUMENTS_REQUEST_RECEIVED, LOAN_DOCUMENTS_REQUEST_SENT, LOAN_DOCUMENTS_RETURNED_ENQUIRY, LOAN_DOCUMENTS_RE_ISSUED, LOAN_DOCUMENTS_RE_ISSUE_REQUEST_SENT, LOAN_FUNDED_BY_LENDER, PAYOUT_FIGURE_RECEIVED, PAYOUT_FIGURE_REJECTED, PRE_APPROVED, PROGRESS_PAYMENT_COMPLETE, PROGRESS_PAYMENT_MESSAGE, READY_FOR_PROGRESS_PAYMENT, READY_FOR_SETTLEMENT, REFERRED_FOR_CREDIT_ASSESSMENT, REFERRED_TO_BROKER, REFERRED_TO_MORTGAGE_INSURER, SECURITY_DOCUMENTS_SENT_TO_CUSTODIAN, SECURITY_DOCUMENTS_SENT_TO_LENDER, SECURITY_PACKET_RECEIVED, SECURITY_REGISTERED, SERVICE_COORDINATOR_ASSIGNED, SETTLEMENT_CANCELLED, SETTLEMENT_COMPLETED, SETTLEMENT_DATE_BOOKED, SETTLEMENT_DATE_CONFIRMED, SETTLEMENT_DATE_ESTIMATED, SETTLEMENT_DELAYED, SETTLEMENT_FUNDS_RECEIVED, SETTLEMENT_REBOOKED, SOLICITOR_INSTRUCTED, SOLICITOR_INSTRUCTION_RECEIVED, SUPPORTING_DOCUMENTS_DETERMINED_TO_BE_INCOMPLETE, SUPPORTING_DOCUMENTS_HAVE_BEEN_VERIFIED, SUPPORTING_DOCUMENTS_RECEIVED, TITLE_SEARCH_ORDERED, TITLE_SEARCH_RECEIVED, UNCONDITIONALLY_APPROVED, VALUATION_APPROVED, VALUATION_CANCELLED, VALUATION_NOT_REQUIRED, VALUATION_ORDERED, VALUATION_RECEIVED, VARIATION_INITIALISED, WITHDRAWN;

    @JsonValue
    public String toValue() {
        switch (this) {
            case ADDITIONAL_INFORMATION_HAS_BEEN_REQUESTED: return "Additional Information Has Been Requested";
            case APPLICATION_RECEIVED: return "Application Received";
            case APPLICATION_REGISTERED: return "Application Registered";
            case APPLICATION_SENT: return "Application Sent";
            case AWAITING_SUPPORTING_DOCUMENTS: return "Awaiting Supporting Documents";
            case CANCELLED: return "Cancelled";
            case COMMENT: return "Comment";
            case COMMISSION_PAID: return "Commission Paid";
            case CONDITIONALLY_APPROVED: return "Conditionally Approved";
            case CREDIT_CHECK_ORDERED: return "Credit Check Ordered";
            case CREDIT_CHECK_RECEIVED: return "Credit Check Received";
            case DECLINED: return "Declined";
            case DISCHARGED: return "Discharged";
            case DUPLICATE_SUBMISSION: return "Duplicate Submission";
            case EMPLOYMENT_CHECK_COMMENCED: return "Employment Check Commenced";
            case EMPLOYMENT_CHECK_COMPLETED: return "Employment Check Completed";
            case EMPLOYMENT_CHECK_DELAYED: return "Employment Check Delayed";
            case ERROR_ON_SUBMISSION: return "Error on Submission";
            case LMI_ORDERED: return "LMI Ordered";
            case LMI_RESPONSE_RECEIVED: return "LMI Response Received";
            case LOAN_DOCUMENTS_AND_REQUIREMENTS_COMPLETE: return "Loan Documents and Requirements Complete";
            case LOAN_DOCUMENTS_AND_REQUIREMENTS_INCOMPLETE: return "Loan Documents and Requirements Incomplete";
            case LOAN_DOCUMENTS_CERTIFIED_FOR_SETTLEMENT: return "Loan Documents Certified for Settlement";
            case LOAN_DOCUMENTS_ERROR_MESSAGE_RETURNED: return "Loan Documents Error Message Returned";
            case LOAN_DOCUMENTS_FOLLOW_UP: return "Loan Documents Follow Up";
            case LOAN_DOCUMENTS_ISSUED: return "Loan Documents Issued";
            case LOAN_DOCUMENTS_PREPARATION_COMMENCED: return "Loan Documents Preparation Commenced";
            case LOAN_DOCUMENTS_PRODUCED: return "Loan Documents Produced";
            case LOAN_DOCUMENTS_PRODUCED_AND_RETURNED_TO_LENDER: return "Loan Documents Produced and Returned to Lender";
            case LOAN_DOCUMENTS_RECEIVED: return "Loan Documents Received";
            case LOAN_DOCUMENTS_REQUEST_RECEIVED: return "Loan Documents Request Received";
            case LOAN_DOCUMENTS_REQUEST_SENT: return "Loan Documents Request Sent";
            case LOAN_DOCUMENTS_RETURNED_ENQUIRY: return "Loan Documents Returned Enquiry";
            case LOAN_DOCUMENTS_RE_ISSUED: return "Loan Documents Re-Issued";
            case LOAN_DOCUMENTS_RE_ISSUE_REQUEST_SENT: return "Loan Documents Re-issue Request Sent";
            case LOAN_FUNDED_BY_LENDER: return "Loan Funded by Lender";
            case PAYOUT_FIGURE_RECEIVED: return "Payout Figure Received";
            case PAYOUT_FIGURE_REJECTED: return "Payout Figure Rejected";
            case PRE_APPROVED: return "PreApproved";
            case PROGRESS_PAYMENT_COMPLETE: return "Progress Payment Complete";
            case PROGRESS_PAYMENT_MESSAGE: return "Progress Payment Message";
            case READY_FOR_PROGRESS_PAYMENT: return "Ready for Progress Payment";
            case READY_FOR_SETTLEMENT: return "Ready for Settlement";
            case REFERRED_FOR_CREDIT_ASSESSMENT: return "Referred for Credit Assessment";
            case REFERRED_TO_BROKER: return "Referred to Broker";
            case REFERRED_TO_MORTGAGE_INSURER: return "Referred to Mortgage Insurer";
            case SECURITY_DOCUMENTS_SENT_TO_CUSTODIAN: return "Security Documents Sent to Custodian";
            case SECURITY_DOCUMENTS_SENT_TO_LENDER: return "Security Documents Sent to Lender";
            case SECURITY_PACKET_RECEIVED: return "Security Packet Received";
            case SECURITY_REGISTERED: return "Security Registered";
            case SERVICE_COORDINATOR_ASSIGNED: return "Service Coordinator Assigned";
            case SETTLEMENT_CANCELLED: return "Settlement Cancelled";
            case SETTLEMENT_COMPLETED: return "Settlement Completed";
            case SETTLEMENT_DATE_BOOKED: return "Settlement Date Booked";
            case SETTLEMENT_DATE_CONFIRMED: return "Settlement Date Confirmed";
            case SETTLEMENT_DATE_ESTIMATED: return "Settlement Date Estimated";
            case SETTLEMENT_DELAYED: return "Settlement Delayed";
            case SETTLEMENT_FUNDS_RECEIVED: return "Settlement Funds Received";
            case SETTLEMENT_REBOOKED: return "Settlement Rebooked";
            case SOLICITOR_INSTRUCTED: return "Solicitor Instructed";
            case SOLICITOR_INSTRUCTION_RECEIVED: return "Solicitor Instruction Received";
            case SUPPORTING_DOCUMENTS_DETERMINED_TO_BE_INCOMPLETE: return "Supporting Documents Determined to Be Incomplete";
            case SUPPORTING_DOCUMENTS_HAVE_BEEN_VERIFIED: return "Supporting Documents Have Been Verified";
            case SUPPORTING_DOCUMENTS_RECEIVED: return "Supporting Documents Received";
            case TITLE_SEARCH_ORDERED: return "Title Search Ordered";
            case TITLE_SEARCH_RECEIVED: return "Title Search Received";
            case UNCONDITIONALLY_APPROVED: return "Unconditionally Approved";
            case VALUATION_APPROVED: return "Valuation Approved";
            case VALUATION_CANCELLED: return "Valuation Cancelled";
            case VALUATION_NOT_REQUIRED: return "Valuation Not Required";
            case VALUATION_ORDERED: return "Valuation Ordered";
            case VALUATION_RECEIVED: return "Valuation Received";
            case VARIATION_INITIALISED: return "Variation Initialised";
            case WITHDRAWN: return "Withdrawn";
        }
        return null;
    }

    @JsonCreator
    public static EventNameApplicationInstructionsList forValue(String value) throws IOException {
        if (value.equals("Additional Information Has Been Requested")) return ADDITIONAL_INFORMATION_HAS_BEEN_REQUESTED;
        if (value.equals("Application Received")) return APPLICATION_RECEIVED;
        if (value.equals("Application Registered")) return APPLICATION_REGISTERED;
        if (value.equals("Application Sent")) return APPLICATION_SENT;
        if (value.equals("Awaiting Supporting Documents")) return AWAITING_SUPPORTING_DOCUMENTS;
        if (value.equals("Cancelled")) return CANCELLED;
        if (value.equals("Comment")) return COMMENT;
        if (value.equals("Commission Paid")) return COMMISSION_PAID;
        if (value.equals("Conditionally Approved")) return CONDITIONALLY_APPROVED;
        if (value.equals("Credit Check Ordered")) return CREDIT_CHECK_ORDERED;
        if (value.equals("Credit Check Received")) return CREDIT_CHECK_RECEIVED;
        if (value.equals("Declined")) return DECLINED;
        if (value.equals("Discharged")) return DISCHARGED;
        if (value.equals("Duplicate Submission")) return DUPLICATE_SUBMISSION;
        if (value.equals("Employment Check Commenced")) return EMPLOYMENT_CHECK_COMMENCED;
        if (value.equals("Employment Check Completed")) return EMPLOYMENT_CHECK_COMPLETED;
        if (value.equals("Employment Check Delayed")) return EMPLOYMENT_CHECK_DELAYED;
        if (value.equals("Error on Submission")) return ERROR_ON_SUBMISSION;
        if (value.equals("LMI Ordered")) return LMI_ORDERED;
        if (value.equals("LMI Response Received")) return LMI_RESPONSE_RECEIVED;
        if (value.equals("Loan Documents and Requirements Complete")) return LOAN_DOCUMENTS_AND_REQUIREMENTS_COMPLETE;
        if (value.equals("Loan Documents and Requirements Incomplete")) return LOAN_DOCUMENTS_AND_REQUIREMENTS_INCOMPLETE;
        if (value.equals("Loan Documents Certified for Settlement")) return LOAN_DOCUMENTS_CERTIFIED_FOR_SETTLEMENT;
        if (value.equals("Loan Documents Error Message Returned")) return LOAN_DOCUMENTS_ERROR_MESSAGE_RETURNED;
        if (value.equals("Loan Documents Follow Up")) return LOAN_DOCUMENTS_FOLLOW_UP;
        if (value.equals("Loan Documents Issued")) return LOAN_DOCUMENTS_ISSUED;
        if (value.equals("Loan Documents Preparation Commenced")) return LOAN_DOCUMENTS_PREPARATION_COMMENCED;
        if (value.equals("Loan Documents Produced")) return LOAN_DOCUMENTS_PRODUCED;
        if (value.equals("Loan Documents Produced and Returned to Lender")) return LOAN_DOCUMENTS_PRODUCED_AND_RETURNED_TO_LENDER;
        if (value.equals("Loan Documents Received")) return LOAN_DOCUMENTS_RECEIVED;
        if (value.equals("Loan Documents Request Received")) return LOAN_DOCUMENTS_REQUEST_RECEIVED;
        if (value.equals("Loan Documents Request Sent")) return LOAN_DOCUMENTS_REQUEST_SENT;
        if (value.equals("Loan Documents Returned Enquiry")) return LOAN_DOCUMENTS_RETURNED_ENQUIRY;
        if (value.equals("Loan Documents Re-Issued")) return LOAN_DOCUMENTS_RE_ISSUED;
        if (value.equals("Loan Documents Re-issue Request Sent")) return LOAN_DOCUMENTS_RE_ISSUE_REQUEST_SENT;
        if (value.equals("Loan Funded by Lender")) return LOAN_FUNDED_BY_LENDER;
        if (value.equals("Payout Figure Received")) return PAYOUT_FIGURE_RECEIVED;
        if (value.equals("Payout Figure Rejected")) return PAYOUT_FIGURE_REJECTED;
        if (value.equals("PreApproved")) return PRE_APPROVED;
        if (value.equals("Progress Payment Complete")) return PROGRESS_PAYMENT_COMPLETE;
        if (value.equals("Progress Payment Message")) return PROGRESS_PAYMENT_MESSAGE;
        if (value.equals("Ready for Progress Payment")) return READY_FOR_PROGRESS_PAYMENT;
        if (value.equals("Ready for Settlement")) return READY_FOR_SETTLEMENT;
        if (value.equals("Referred for Credit Assessment")) return REFERRED_FOR_CREDIT_ASSESSMENT;
        if (value.equals("Referred to Broker")) return REFERRED_TO_BROKER;
        if (value.equals("Referred to Mortgage Insurer")) return REFERRED_TO_MORTGAGE_INSURER;
        if (value.equals("Security Documents Sent to Custodian")) return SECURITY_DOCUMENTS_SENT_TO_CUSTODIAN;
        if (value.equals("Security Documents Sent to Lender")) return SECURITY_DOCUMENTS_SENT_TO_LENDER;
        if (value.equals("Security Packet Received")) return SECURITY_PACKET_RECEIVED;
        if (value.equals("Security Registered")) return SECURITY_REGISTERED;
        if (value.equals("Service Coordinator Assigned")) return SERVICE_COORDINATOR_ASSIGNED;
        if (value.equals("Settlement Cancelled")) return SETTLEMENT_CANCELLED;
        if (value.equals("Settlement Completed")) return SETTLEMENT_COMPLETED;
        if (value.equals("Settlement Date Booked")) return SETTLEMENT_DATE_BOOKED;
        if (value.equals("Settlement Date Confirmed")) return SETTLEMENT_DATE_CONFIRMED;
        if (value.equals("Settlement Date Estimated")) return SETTLEMENT_DATE_ESTIMATED;
        if (value.equals("Settlement Delayed")) return SETTLEMENT_DELAYED;
        if (value.equals("Settlement Funds Received")) return SETTLEMENT_FUNDS_RECEIVED;
        if (value.equals("Settlement Rebooked")) return SETTLEMENT_REBOOKED;
        if (value.equals("Solicitor Instructed")) return SOLICITOR_INSTRUCTED;
        if (value.equals("Solicitor Instruction Received")) return SOLICITOR_INSTRUCTION_RECEIVED;
        if (value.equals("Supporting Documents Determined to Be Incomplete")) return SUPPORTING_DOCUMENTS_DETERMINED_TO_BE_INCOMPLETE;
        if (value.equals("Supporting Documents Have Been Verified")) return SUPPORTING_DOCUMENTS_HAVE_BEEN_VERIFIED;
        if (value.equals("Supporting Documents Received")) return SUPPORTING_DOCUMENTS_RECEIVED;
        if (value.equals("Title Search Ordered")) return TITLE_SEARCH_ORDERED;
        if (value.equals("Title Search Received")) return TITLE_SEARCH_RECEIVED;
        if (value.equals("Unconditionally Approved")) return UNCONDITIONALLY_APPROVED;
        if (value.equals("Valuation Approved")) return VALUATION_APPROVED;
        if (value.equals("Valuation Cancelled")) return VALUATION_CANCELLED;
        if (value.equals("Valuation Not Required")) return VALUATION_NOT_REQUIRED;
        if (value.equals("Valuation Ordered")) return VALUATION_ORDERED;
        if (value.equals("Valuation Received")) return VALUATION_RECEIVED;
        if (value.equals("Variation Initialised")) return VARIATION_INITIALISED;
        if (value.equals("Withdrawn")) return WITHDRAWN;
        throw new IOException("Cannot deserialize EventNameApplicationInstructionsList");
    }
}
